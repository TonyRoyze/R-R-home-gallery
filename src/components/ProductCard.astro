---
// ProductCard.astro
interface Props {
    title: string;
    price: number;
    originalPrice?: number;
    rating: number;
    image: ImageMetadata;
    description: string;
    inStock?: boolean;
}
import Image from "astro/components/Image.astro";
const {
    title,
    price,
    originalPrice,
    rating,
    image,
    description,
    inStock = true,
} = Astro.props;

// Format price to include 2 decimal places and currency
const formatPrice = (amount: number) => {
    return new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
    }).format(amount);
};

// Generate stars for rating
const stars = Array(5)
    .fill("")
    .map((_, index) => index < rating);
---

<div
    class="group relative bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden"
>
    <!-- Image container with zoom effect -->
    <div class="aspect-square overflow-hidden">
        <Image
            src={image}
            alt={title}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            loading="lazy"
        />
    </div>

    <!-- Product details -->
    <div class="p-4">
        <h3 class="text-lg font-semibold text-gray-800 mb-2">
            {title}
        </h3>

        <!-- Price section -->
        <div class="flex items-baseline mb-2">
            <span class="text-xl font-bold text-gray-900">
                {formatPrice(price)}
            </span>
            {
                originalPrice && (
                    <span class="ml-2 text-sm text-gray-500 line-through">
                        {formatPrice(originalPrice)}
                    </span>
                )
            }
        </div>

        <!-- Rating -->
        <div class="flex items-center mb-2">
            {
                stars.map((filled) => (
                    <svg
                        class={`w-5 h-5 ${filled ? "text-yellow-400" : "text-gray-300"}`}
                        fill="currentColor"
                        viewBox="0 0 20 20"
                    >
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                ))
            }
            <span class="ml-2 text-sm text-gray-600">
                {rating.toFixed(1)}
            </span>
        </div>

        <!-- Description -->
        <p class="text-sm text-gray-600 mb-4">
            {description}
        </p>

        <!-- Stock status and Add to cart -->
        <div class="flex items-center justify-between">
            {
                inStock ? (
                    <span class="text-sm text-green-600">In Stock</span>
                ) : (
                    <span class="text-sm text-red-600">Out of Stock</span>
                )
            }

            <!-- <button
                class={`px-4 py-2 rounded-lg transition-colors duration-300 ${
                    inStock
                        ? "bg-blue-600 hover:bg-blue-700 text-white"
                        : "bg-gray-300 cursor-not-allowed text-gray-500"
                }`}
                disabled={!inStock}
            >
                Add to Cart
            </button> -->
        </div>
    </div>
</div>
